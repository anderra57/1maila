package org.pmoo;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class PertsonaTest {

	Pertsona pEtEOn, pEtBAn, pUsaEOp, pUsaBAp, pSerBBn, pSerEABn, pAusEABp, pAusBBp;
	
	@Before
	public void setUp() throws Exception {
		//String pIzena, int pAdina, int pId, char pSexua, 
		// , String pNazionalitatea, String pOdolMota
		pEtEOn= new Pertsona("Jon Paul Alima", 13, 1 , 'g', "Etiopia", "O-");
		pEtBAn= new Pertsona("George Alima", 16, 2 , 'g', "Etiopia", "A-");
		pUsaEOp= new Pertsona("James Jones", 15, 3 , 'g', "Estatu Batuak", "O+");
		pUsaBAp= new Pertsona("Alisha Damm", 18, 4 , 'e', "Estatu Batuak", "A+");
		pSerBBn= new Pertsona("Nikola Jokic", 21, 5 , 'g', "Serbia", "B-");
		pSerEABn= new Pertsona("Ante Zizica", 16, 6 , 'e', "Serbia", "AB-");
		pAusEABp= new Pertsona("Doreen James", 12, 7 , 'e', "Australia", "AB+");
		pAusBBp= new Pertsona("Casey Stoner", 40, 8 , 'g', "Australia", "B+");
	}
	//atributuak

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testPertsona() {
		assertNotNull(pEtEOn);
		assertNotNull(pEtBAn);
	}

	@Test
	public void testIdBerdinaDu() {
		assertFalse(pEtEOn.idBerdinaDu(pEtBAn));
	}

	@Test
	public void testGidatuDezake() {
		assertTrue(pEtBAn.gidatuDezake());
		assertFalse(pEtEOn.gidatuDezake());

		assertTrue(pUsaBAp.gidatuDezake());
		assertFalse(pUsaEOp.gidatuDezake());

		assertTrue(pSerBBn.gidatuDezake());
		assertFalse(pSerEABn.gidatuDezake());

		assertTrue(pAusBBp.gidatuDezake());
		assertFalse(pAusEABp.gidatuDezake());
	}

	@Test
	public void testOdolaEmanDiezaioke() {
			
		//AB+
		assertTrue(pAusEABp.odolaEmanDiezaioke(pAusEABp));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pSerEABn));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pUsaBAp));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pEtBAn));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pAusBBp));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pSerBBn));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pUsaEOp));
		assertTrue(pAusEABp.odolaEmanDiezaioke(pEtEOn));
		
		//AB-
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assert(.odolaEmanDiezaioke(pUsaEOp));		
		assertTrue(.odolaEmanDiezaioke(pSerBBn));		
		assertTrue(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assertTrue(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//A+
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assertTrue(.odolaEmanDiezaioke(pUsaEOp));		
		assert(.odolaEmanDiezaioke(pSerBBn));		
		assertTrue(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assertTrue(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//A-
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assert(.odolaEmanDiezaioke(pUsaEOp));		
		assert(.odolaEmanDiezaioke(pSerBBn));		
		assertTrue(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//B+
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assertTrue(.odolaEmanDiezaioke(pUsaEOp));		
		assertTrue(.odolaEmanDiezaioke(pSerBBn));		
		assert(.odolaEmanDiezaioke(pEtBAn));	
		assertTrue(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//B-
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assert(.odolaEmanDiezaioke(pUsaEOp));		
		assertTrue(.odolaEmanDiezaioke(pSerBBn));		
		assert(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//O+
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assertTrue(.odolaEmanDiezaioke(pUsaEOp));		
		assert(.odolaEmanDiezaioke(pSerBBn));		
		assert(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	
		
		//O-
		assertTrue(.odolaEmanDiezaioke(pEtEOn));
		assert(.odolaEmanDiezaioke(pUsaEOp));		
		assert(.odolaEmanDiezaioke(pSerBBn));		
		assert(.odolaEmanDiezaioke(pEtBAn));	
		assert(.odolaEmanDiezaioke(pAusBBp));		
		assert(.odolaEmanDiezaioke(pUsaBAp));		
		assert(.odolaEmanDiezaioke(pSerEABn));
		assert(.odolaEmanDiezaioke(pAusEABp));	

		
		/*
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		assert(.odolaEmanDiezaioke());
		*/
	}

	@Test
	public void testGetIzenarenIniziala() {
		assertNotNull(pEtEOn.getIzenarenIniziala());
	}

	/*@Test
	public void testGetAbizenarenIniziala() {
		fail("Not yet implemented");
	}*/

	//eraikitzaileak

	//gainontzeko metodoak
}
